function generate_connectivity_maps(subjs_dir, study, ref, locks, bands, ztol, atlas, abr)

ar_ord = 14;
ba_init = 15;



A_deck = zeros(N,N,L); % A_deck is a #electrode x #electrode x #event matrix. Stores all event connectivity map for a subject, lock, band combination
ba = ba_init; 
S = 0;
BA = [];

%         lS = [];
%         fS = [];
%         lBA = [];
%         fBA = [];
fprintf('\n%s %s %s\n', subj, lock, band)

for ii = 1:L % loop thru stimulus event files
    dat = evn_seg(:,:,ii);
    evn_nm = evn{ii}; % event name
    fprintf('%i %s\n', ii, evn_nm)

    if size(dat,1) <= 2
        break
    end
    if ii == 1
        [stp, tol] = init_stepsize(dat, ba, ar_ord, ztol, S);
    end

    [S, BA] = opt_sparsity_coef(dat, ba, ar_ord, ztol, stp, tol, S, BA);
    sparsity = S(end);
    ba = BA(end);
    A = gl_ar(dat, ba, ar_ord);
    A_deck(:,:,ii) = A;
%             plot_connectivity_map(A, subj, ref, lock, band, cmpth, loc, ztol, 'event', evn_nm, 'sparsity', sparsity, 'ar', ar_ord);


%             lS = [lS length(S)];
%             fS = [fS sparsity];
%             lBA = [lBA length(BA)];
%             fBA = [fBA ba];

%             %         Figures for sparsity control algorithm
%                     figure
%                     plot(1:length(S)-1,S(2:end), 'linewidth', 1.5)
%                     hold on
%                     scatter(lS-1, fS, 'x', 'r') 
%                     xlabel('iterations')
%                     ylabel('sparsity')
%             %         set(gcf, 'Units','pixels','Position',[100 110 2000 400])
% 
%                     figure
%                     plot(1:length(BA), BA, 'linewidth', 1.5)
%                     hold on
%                     scatter(lBA, fBA, 'x', 'r') 
%                     xlabel('iterations')
%                     ylabel('ba')
%             %         set(gcf, 'Units','pixels','Position',[100 110 2000 400])
%                     close all

end
save(sprintf('%s/%s_%s_%s_%s_adjaceny.mat', dpth, subj, ref, lock, band),'A_deck','evn','sig_lab');
end
